79 Word search
Statement:-
Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are 
horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
code:-
def dfs(i, j, s):
    if i < 0 or i >= m or j < 0 or j >= n or l[i][j] != word[s] or l[i][j] == '*':
        return 0
    if s == len(word) - 1:
        return 1
    c = l[i][j]
    l[i][j] = '*'
    res = dfs(i + 1, j, s + 1) or dfs(i - 1, j, s + 1) or dfs(i, j + 1, s + 1) or dfs(i, j - 1, s + 1)
    l[i][j] = c
    return res
n=int(input()) #cols
m=int(input()) #rows
l=[['*']*n for i in range(m)]
for i in range(m):
    l[i] = input().split(' ')[:n]
f=any(dfs(i, j, 0) for i in range(m) for j in range(n))
print(f)
